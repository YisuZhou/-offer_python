两个链表的第一个公共节点

1. 某一链表中的每一个节点都去另一个链表中查找，最费时，但是可以找到所有公共节点，M*N的时间复杂度
以下实现的就是这种方法

以下两种方法复杂度低，但是都只支持Y状合并的单链表
2. 先遍历这两个链表，
用两个列表把这两个链表分别保存下来，
比较这两个列表的最后一个元素，一样就pop，不一样就表示上一个pop的就是公共节点
但是只支持Y状合并的两个单链表。不算第一次遍历的话只需要max(M,N)的时间复杂复

3. 先遍历这两个链表，分别记下长度，计算长度差，长的那个先走长度差步，
相当于把前面不等长的头去掉，剩下的就是等长的两个链表，
然后同时往后遍历，到相同的时候就是公共节点
依然只支持Y状合并的两个单链表。不算第一次遍历的话只需要max(M,N)的时间复杂复

# -*- coding:utf-8 -*-
# class ListNode:
#     def __init__(self, x):
#         self.val = x
#         self.next = None
class Solution:
    def FindFirstCommonNode(self, pHead1, pHead2):
        # write code here
        # 用最费时最简单的方案尝试，M*N的时间复杂度
        p2 = pHead2
        while pHead1 :
            while pHead2:
                if pHead2 == pHead1:
                    return pHead2
                else:
                    pHead2 = pHead2.next
            pHead2 = p2
            pHead1 = pHead1.next   
        return None
