# https://blog.csdn.net/u010005281/article/details/80099333
# -*- coding:utf-8 -*-
class Solution:
    def InversePairs(self, data):
        # write code here
        # 一看到对1000000007取模我就觉得应该是有什么trick的方案
        # 可是我又想不出来，我的第一想法就是，直接暴力找出所有。。。(通过率25%，运行超时)
        # 搜索了网络发现并没有涉及到这个数字的trick，而是采用分治思想，在归并排序的过程中取找逆序对
        # 逆序对的总对数就是分的时候的逆序对数量+排序之后的逆序对数量
        
        return self.inverseCount(data[:], 0, len(data)-1, data[:])%1000000007
       
    def inverseCount(self, tmp, start, end, data):
        if end-start <1:
            return 0
        if end - start == 1:
            if data[start]<=data[end]:
                return 0
            else:
                tmp[start], tmp[end] = data[end], data[start]
                return 1
        mid = (start+end)//2
        cnt = self.inverseCount(data, start, mid, tmp) + self.inverseCount(data, mid+1, end, tmp)
        
        i = start
        j = mid + 1
        ind = start
        # 前面已经在左右两个部分排好序了，下面就是连接，就是每次比较两个序列里最小的数字
        while(i <= mid and j <= end):
            if data[i] <= data[j]:
                tmp[ind] = data[i]
                i += 1
            else:  # 前面的数字大，所以要加，
                tmp[ind] = data[j]
                cnt += mid - i + 1  # 因为前面本来就是从小到大的所以对于第二个数data[j],前面后部分全部都符合要求
                j += 1
            ind += 1
            
        # 下面就是为了排序了，不涉及计数。剩下就是有一个序列可能都排进去了，剩下的都是最大的那些
        while(i<=mid):
            tmp[ind] = data[i]
            i += 1
            ind += 1
        while(j<=end):
            tmp[ind] = data[j]
            j += 1
            ind += 1
        return cnt
        
